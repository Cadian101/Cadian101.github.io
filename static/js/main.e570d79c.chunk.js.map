{"version":3,"sources":["components/InputSearch/components/RecentSearches/RecentSearches.tsx","components/InputSearch/InputSearch.tsx","hooks/useDebounce.tsx","components/SearchStuff/SearchStuff.tsx","components/SearchHistory/SearchHistory.tsx","App.tsx","store/store.tsx","serviceWorker.ts","index.tsx"],"names":["RecentSearches","listId","optionsData","id","map","optionData","i","value","InputSearch","historyQueries","useSelector","store","latterMemories","dispatch","useDispatch","className","type","minLength","list","placeholder","onChange","event","payload","target","useDebounce","delay","useState","debouncedValue","setDebouncedValue","useEffect","timer","setTimeout","clearTimeout","SearchStuff","searchQuery","searchString","debouncedInput","pageQuantity","SetPageQuantity","currentPage","SetCurrentPage","repos","SetRepos","respError","setRespError","debouncedPage","query","length","concat","fetch","method","then","r","json","catch","error","Error","results","undefined","message","items","n","Math","ceil","total_count","isNaN","disabled","onClick","prevState","min","max","e","repo","href","html_url","rel","name","language","description","SearchHistory","browserStorage","window","sessionStorage","setBrowserStorage","data","setItem","JSON","stringify","getBrowserStorage","parse","getItem","historyQuery","App","emptyStore","createStore","state","action","latestSearchesQuantity","slice","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.e570d79c.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\n\r\ntype RecentSearchesProps = {\r\n    listId: string;\r\n    optionsData: string[];\r\n};\r\n\r\nconst RecentSearches: FC<RecentSearchesProps> = ({listId, optionsData }) => {\r\n    return (\r\n        <datalist id={listId}>\r\n            {optionsData.map((optionData, i) => {\r\n                return <option key={i} value={optionData} />\r\n            })}\r\n        </datalist>\r\n    );\r\n};\r\n\r\nexport default RecentSearches;\r\n","import React, { ChangeEvent, FC } from \"react\";\r\nimport RecentSearches from \"./components/RecentSearches/RecentSearches\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Store } from \"../../store/store\";\r\n\r\nconst InputSearch: FC = () => {\r\n    const minlength: number = 3;\r\n    const listId: string = \"recent-searches\";\r\n\r\n    const historyQueries = useSelector((store: Store) => store.latterMemories);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch({ type: \"search\", payload: event.target.value });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                id=\"input-search\"\r\n                className={\"input input--search\"}\r\n                type=\"search\"\r\n                minLength={minlength}\r\n                list={listId}\r\n                placeholder={`Search will start with > ${minlength} symbols`}\r\n                onChange={handleChange}\r\n            />\r\n            <RecentSearches listId={listId} optionsData={historyQueries} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InputSearch;\r\n","import { useEffect, useState } from 'react';\r\n\r\nfunction useDebounce<T>(value: T, delay?: number): T {\r\n    const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n    useEffect(() => {\r\n        const timer = setTimeout(() => setDebouncedValue(value), delay || 300);\r\n\r\n        return () => {\r\n            clearTimeout(timer)\r\n        }\r\n    }, [value, delay]);\r\n\r\n    return debouncedValue\r\n}\r\n\r\nexport default useDebounce;\r\n","import React, { ChangeEvent, FC, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Store } from \"../../store/store\";\r\nimport useDebounce from \"../../hooks/useDebounce\";\r\n\r\nconst SearchStuff: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const searchQuery: string = useSelector((store: Store) => store.searchString);\r\n    const historyQueries: string[] = useSelector((store: Store) => store.latterMemories);\r\n    const itemsPerPage: number = 10;\r\n    const delay: number = 500;\r\n\r\n    const debouncedInput = useDebounce<string>(searchQuery, delay);\r\n\r\n    const [pageQuantity, SetPageQuantity] = useState<number>(1);\r\n    const [currentPage, SetCurrentPage] = useState<number>(1);\r\n    const [repos, SetRepos] = useState<[]>([]);\r\n    const [respError, setRespError] = useState<string | undefined>();\r\n    const debouncedPage = useDebounce<number>(currentPage, delay);\r\n\r\n    const searchRepos = (query: string) => {\r\n        return fetch(\r\n            `https://api.github.com/search/repositories?q=${query}&per_page=${itemsPerPage}&page=${currentPage}`,\r\n            {\r\n                method: \"GET\"\r\n            }\r\n        )\r\n            .then((r) => r.json())\r\n            .catch((error) => {\r\n                return new Error(error);\r\n            });\r\n    };\r\n\r\n    const pageMove = (event: ChangeEvent<HTMLInputElement>) => {\r\n        SetCurrentPage(+event.target.value);\r\n    };\r\n\r\n    const pagePlus = () => {\r\n        return currentPage < pageQuantity\r\n            ? SetCurrentPage(prevState => prevState + 1)\r\n            : 0;\r\n    };\r\n\r\n    const pageMinus = () => {\r\n        return currentPage === 1\r\n            ? 0\r\n            : SetCurrentPage(prevState => prevState - 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n            if (debouncedInput) {\r\n                if (debouncedInput !== historyQueries[historyQueries.length -1]) {\r\n                    dispatch({ type: \"remind\", payload: historyQueries.concat([debouncedInput]) });\r\n                }\r\n\r\n                searchRepos(debouncedInput).then((results) => {\r\n                    if (results.message !== undefined) {\r\n                        setRespError(results.message);\r\n                    } else if (results.items.length >= 1) {\r\n                        SetRepos(results.items);\r\n                        SetPageQuantity((): number => {\r\n                            const n = Math.ceil(results.total_count / itemsPerPage) <= 1000\r\n                                ? Math.ceil(results.total_count / itemsPerPage)\r\n                                : 100;\r\n\r\n                            if (currentPage > n) {\r\n                                SetCurrentPage(n);\r\n                            }\r\n\r\n                            return isNaN(n) ? 1 : n\r\n                        });\r\n                        setRespError(undefined);\r\n                    } else {\r\n                        SetRepos([]);\r\n                    }\r\n                });\r\n            } else {\r\n                SetRepos([])\r\n                SetCurrentPage(1)\r\n                SetPageQuantity(1);\r\n            }\r\n        },\r\n        [debouncedInput, debouncedPage]\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <div className=\"search-result-paging\">\r\n                <button\r\n                    className=\"search-result-paging__button\"\r\n                    disabled={currentPage === 1}\r\n                    onClick={() => pageMinus()}\r\n                >\r\n                    &lt;\r\n                </button>\r\n                <span>\r\n                    Page\r\n                    <input\r\n                        className=\"search-result-paging__input\"\r\n                        type=\"number\"\r\n                        min=\"1\"\r\n                        max={pageQuantity}\r\n                        value={currentPage}\r\n                        onChange={(e) => pageMove(e)}\r\n                    />\r\n                    of {pageQuantity}\r\n                </span>\r\n                <button\r\n                    className=\"search-result-paging__button\"\r\n                    disabled={currentPage === pageQuantity}\r\n                    onClick={() => pagePlus()}\r\n                >\r\n                    &gt;\r\n                </button>\r\n            </div>\r\n            {respError && (<p>{respError}</p>)}\r\n            <ul className=\"search-result\">\r\n                {repos && (\r\n                    repos.map((repo: any, i: number) => {\r\n                        return (\r\n                            <li key={i} className=\"search-result__item\">\r\n                                <div className=\"search-result__item-wrapper\">\r\n                                    <h2 className=\"title\">\r\n                                        <a  className=\"title__link\" href={repo.html_url} rel=\"noopener noreferrer\" target=\"_blank\">{repo.name}</a>\r\n                                    </h2>\r\n                                    <dl className=\"feature feature--rowed\">\r\n                                        <dt className=\"feature__term\">Language:</dt>\r\n                                        <dd className=\"feature__description\">{repo.language}</dd>\r\n                                    </dl>\r\n                                    <dl className=\"feature\">\r\n                                        <dt className=\"feature__term\">Description:</dt>\r\n                                        <dd className=\"feature__description\">{repo.description}</dd>\r\n                                    </dl>\r\n                                </div>\r\n                            </li>\r\n                        );\r\n                    })\r\n                )}\r\n            </ul>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SearchStuff;\r\n","import React, { FC, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Store } from \"../../store/store\";\r\n\r\nconst SearchHistory: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const historyQueries: string[] = useSelector((store: Store) => store.latterMemories);\r\n\r\n    let browserStorage = window.sessionStorage;\r\n\r\n    const setBrowserStorage = (name: string, data: any) => {\r\n        try {\r\n            browserStorage.setItem(\r\n                name,\r\n                typeof data !== 'undefined' || null || (typeof data !== 'object' && typeof data !== 'function')\r\n                    ? JSON.stringify(data)\r\n                    : data\r\n            )\r\n        } catch (e) {\r\n            throw new Error(`Something went wrong during storage setup ${e}`)\r\n        }\r\n    }\r\n\r\n    const getBrowserStorage = (name: string) => {\r\n        try {\r\n            return JSON.parse(browserStorage.getItem(name) as string)\r\n        } catch (e) {\r\n            throw new Error(`Something went wrong during storage read ${e}`)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (typeof getBrowserStorage('searchHistory') !== 'object') {\r\n            setBrowserStorage(\"searchHistory\",historyQueries);\r\n        } else {\r\n            dispatch({ type: \"remind\", payload: getBrowserStorage('searchHistory') });\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        if (getBrowserStorage('searchHistory') !== historyQueries) {\r\n            setBrowserStorage(\"searchHistory\", historyQueries);\r\n        }\r\n    },[historyQueries])\r\n\r\n    return (\r\n        <div className='search-history'>\r\n            <h3 className=\"search-history__title\">Search history <span className=\"search-history__list-order\">(oldest first)</span> :</h3>\r\n            {historyQueries && (\r\n                <ul className=\"search-history__list\">\r\n                    {historyQueries.map((historyQuery, i) =>{\r\n                        return (\r\n                            <li className=\"search-history__list-item\" key={i}>\r\n                                {historyQuery}\r\n                            </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchHistory;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport InputSearch from \"./components/InputSearch/InputSearch\";\nimport SearchStuff from \"./components/SearchStuff/SearchStuff\";\nimport SearchHistory from \"./components/SearchHistory/SearchHistory\";\n\nfunction App(): JSX.Element {\n    return (\n        <main className=\"App\">\n            <header className=\"header\">\n                <strong className=\"logo\"><a className=\"logo__link\" href=\"https://spark.adobe.com/express-apps/logo-maker/\">Logo</a></strong>\n                <p className=\"description\">GitHub public repos search</p>\n            </header>\n            <div className=\"main-content\">\n                <article className=\"main-content__results\">\n                    <SearchStuff />\n                </article>\n                <aside className=\"main-content__aside\">\n                    <InputSearch />\n                    <SearchHistory />\n                </aside>\n            </div>\n        </main>\n    );\n}\n\nexport default App;\n","import { createStore } from 'redux';\n\nexport type Store = {\n    searchString: string;\n    latterMemories: string[],\n};\n\nconst emptyStore: Store = {\n    searchString: '',\n    latterMemories: [],\n}\n\nconst searchStringReducer = (state: Store = emptyStore, action: any): Store  => {\n    if (action.type === 'search') {\n        return {\n            ...state,\n            searchString: action.payload,\n        }\n    }\n\n    if (action.type === 'remind') {\n        const latestSearchesQuantity: number = 5;\n        return {\n            ...state,\n            latterMemories: action.payload.slice(-latestSearchesQuantity),\n        }\n    }\n\n    return state\n}\n\nconst store = createStore(searchStringReducer);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store  from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}